#!/bin/bash

# Daylily Headnode Configuration Script

# Capture arguments for PEM file and region
pem_file=$1
region=$2
aws_profile=$3
requested_cluster_name=$4
duser="ubuntu"

dayec_name="daylily-ephemeral-cluster"

CONFIG_FILE="config/daylily_cli_global.yaml"

git_ephemeral_cluster_repo_tag=$(yq -r '.daylily.git_ephemeral_cluster_repo_tag' "$CONFIG_FILE")
git_ephemeral_cluster_repo=$(yq -r '.daylily.git_ephemeral_cluster_repo' "$CONFIG_FILE")
daylily_image_cmd=$(yq -r '.daylily.daylily_image_cmd' "$CONFIG_FILE")

# Ensure both PEM file and region are provided
if [[ -z "$pem_file" || -z "$region" || -z "$aws_profile" ]]; then
    echo "Error: You must provide both the PEM file path and the AWS region."
    echo "Usage: source $0 /path/to/pem_file region profile [cluster_name]"
    return 1
fi
 
AWS_PROFILE=$aws_profile

# List available clusters in the specified region
echo "Clusters detected in region $region:"
cluster_names=$(pcluster list-clusters --region $region | grep clusterName | awk '{print $2}' | cut -d '"' -f 2)

# Check if there are any clusters detected
if [[ -z "$cluster_names" ]]; then
    echo "Error: No clusters found in region $region."
    return 1
fi
# Convert detected cluster names into an array
cluster_array=()
while IFS= read -r cluster_name; do
    cluster_array+=("$cluster_name")
done <<< "$cluster_names"

# Auto-select the requested cluster when possible.
selected_cluster=""
if [[ -n "$requested_cluster_name" ]]; then
    for cluster in "${cluster_array[@]}"; do
        if [[ "$cluster" == "$requested_cluster_name" ]]; then
            selected_cluster="$cluster"
            echo "Auto-selecting user-requested cluster: $selected_cluster"
            break
        fi
    done
    if [[ -z "$selected_cluster" ]]; then
        echo "⚠️ Requested cluster '$requested_cluster_name' not found in region $region."
    fi
fi

# Auto-select if there is only one cluster or if a requested cluster was matched.
if [[ -z "$selected_cluster" ]]; then
    if [[ ${#cluster_array[@]} -eq 1 ]]; then
        selected_cluster=${cluster_array[0]}
        echo "Only one cluster found: $selected_cluster. Auto-selecting it."
    else
        echo "Select a cluster name:"
        select selected_cluster in "${cluster_array[@]}"; do
            if [[ -n "$selected_cluster" ]]; then
                echo "You selected: $selected_cluster"
                break
            else
                echo "Invalid selection, please try again."
            fi
        done
    fi
fi
cluster_name=$selected_cluster


# Get the public IP address of the cluster's head node
cluster_ip_address=$(pcluster describe-cluster-instances -n "$cluster_name" --region "$region" \
    | grep publicIpAddress | perl -p -e 's/[ |"|,]//g;' | cut -d ':' -f 2)

if [[ -z "$cluster_ip_address" ]]; then
    echo "Error: Could not retrieve the public IP address of the cluster."
    return 1
fi

echo "Cluster $cluster_name's public IP is $cluster_ip_address."
echo " "

# List available PEM files in the .ssh directory
echo "Detected PEM files in ~/.ssh:"
ls -1 ~/.ssh/*.pem

# If PEM file is not provided as an argument, prompt the user
if [[ -z "$pem_file" ]]; then
    echo "Enter the full absolute path to your PEM file:"
    read pem_file
fi

# Ensure the PEM file exists
if [[ ! -f "$pem_file" ]]; then
    echo "Error: PEM file '$pem_file' does not exist."
    return 1
fi

# Generate SSH key for the head node user
echo "Generating SSH key on the head node..."
ssh -i "$pem_file" ubuntu@"$cluster_ip_address"   -o StrictHostKeyChecking=no   -o UserKnownHostsFile=/dev/null \
    "ssh-keygen -q -t rsa -f ~/.ssh/id_rsa -N '' <<< $'\ny' | sudo su - $duser"

# Display the public key and instruct the user to add it to GitHub
echo "You must have a GitHub account and access to the Daylily repository."
echo "Please add the following public SSH key to GitHub:"
git_key_log=$(ssh -i "$pem_file"  -o StrictHostKeyChecking=no   -o UserKnownHostsFile=/dev/null ubuntu@"$cluster_ip_address" "cat ~/.ssh/id_rsa.pub")
echo $git_key_log
mkdir -p logs
echo "$git_key_log" >> logs/$cluster_ip_address_pubkey.txt

echo " "
echo "(optional) save this SSH key in GitHub to your settings->ssh/gpg keys, which will allow you to push changes back to github if you make any. You can always add this key latter too, find it in you ~/.ssh/id_rsa.pub.\n\n\tSleeping for 15s then proceeding."
sleep 15
echo "Building the Daylily container on the head node..."
# Pull the Daylily container using Singularity
ssh -t -i "$pem_file" ubuntu@"$cluster_ip_address"  -o StrictHostKeyChecking=no   -o UserKnownHostsFile=/dev/null  \
    " $daylily_image_cmd " 

# Clone the $dayec_name repository to the head node
echo "Cloning $dayec_name repository using https to the head node ~/projects"
ssh -t -i "$pem_file" ubuntu@"$cluster_ip_address"  -o StrictHostKeyChecking=no   -o UserKnownHostsFile=/dev/null \
    "mkdir -p ~/projects && cd ~/projects &&  git clone -b ${git_ephemeral_cluster_repo_tag} ${git_ephemeral_cluster_repo} $dayec_name && cd $dayec_name && bin/install_miniconda || echo "failed to install miniconda" && bin/init_dayec || echo "failed to install day-ec" &&
. dyinit "

# Install shared tooling from the repo (day-clone, config files, etc.)
echo "Installing head node tooling from the cloned repository..."
ssh -t -i "$pem_file" ubuntu@"$cluster_ip_address" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
    "source ~/.bashrc && cd ~/projects/$dayec_name && ./bin/install-daylily-headnode-tools"

echo "Installing Miniconda and initializing the DAY-EC environment on the head node..."
ssh -t -i "$pem_file" ubuntu@"$cluster_ip_address" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
    "source ~/.bashrc && cd ~/projects/$dayec_name && ./bin/install_miniconda && ./bin/init_dayec"

echo "day-clone is now available on the head node. Use it to clone analysis repositories such as daylily-omics-analysis."

# Provide final instructions for SSH access to the head node
echo "You can now SSH into the head node with the following command:"
echo "        ssh -i $pem_file ubuntu@$cluster_ip_address"
echo " "
echo "Once logged in, as the 'ubuntu' user, run the following commands:"
echo "  cd ~/projects/$dayec_name"
echo "  ./bin/install_miniconda"
echo "  ./bin/init_dayec"
echo "  ./bin/day-clone --list"
echo "  day-clone -d <analysis_name> [--repository <repo-key>]"
echo " "
echo ".... this will clone the selected analysis repository into /fsx/analysis_results/<user>/<analysis_name>/"
echo " "
echo "Setup complete. "

echo " "
echo "And, you may now access the headnode via the PCUI, via 'source bin/daylily-ssh-into-headnode', or SSH into the head node with the following command:"
echo -e "       ssh -i $pem_file ubuntu@$cluster_ip_address\n"
echo " "
echo "If you wish to run some remote tests, you can do so with the following command:"
echo -e "   ./bin/daylily-run-ephemeral-cluster-remote-tests $pem_file $region $aws_profile\n"
echo " "
echo "...fin"
