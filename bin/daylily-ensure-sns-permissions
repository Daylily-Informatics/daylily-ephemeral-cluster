#!/usr/bin/env bash
set -euo pipefail

usage() {
    cat <<'USAGE'
Usage: $0 --region REGION --account-id ACCOUNT_ID --iam-user USER [--profile PROFILE]

Ensures the specified IAM user has the inline policy required for SNS access.
- If jq is available, compares the existing inline policy to the expected one.
- If jq is not available, skips comparison and just (re)applies the policy.
USAGE
}

region=""
account_id=""
iam_user=""
profile=""

while [[ $# -gt 0 ]]; do
    case "$1" in
        --region)      region="$2"; shift 2 ;;
        --account-id)  account_id="$2"; shift 2 ;;
        --iam-user)    iam_user="$2"; shift 2 ;;
        --profile)     profile="$2"; shift 2 ;;
        --help|-h)     usage; exit 0 ;;
        *) echo "Unknown option: $1" >&2; usage >&2; exit 1 ;;
    esac
done

if [[ -z "$region" || -z "$account_id" || -z "$iam_user" ]]; then
    echo "Missing required arguments." >&2
    usage >&2
    exit 1
fi

policy_name="daylily-sns-${region}-${account_id}"

policy_document=$(cat <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "sns:CreateTopic",
        "sns:DeleteTopic",
        "sns:ListTopics",
        "sns:GetTopicAttributes",
        "sns:SetTopicAttributes",
        "sns:Subscribe",
        "sns:Unsubscribe",
        "sns:Publish"
      ],
      "Resource": "arn:aws:sns:${region}:${account_id}:*"
    }
  ]
}
EOF
)

policy_file="$(mktemp)"
trap 'rm -f "$policy_file"' EXIT
printf '%s\n' "$policy_document" >"$policy_file"

aws_cmd=(aws iam)
[[ -n "$profile" ]] && aws_cmd+=(--profile "$profile")

# URL-decode helper (no python)
urldecode() {
    # Convert %XX to bytes; preserve '+' literally (AWS uses %20 for spaces).
    local data=${1//+/+}
    printf '%b' "${data//%/\\x}"
}

have_jq=false
if command -v jq >/dev/null 2>&1; then
    have_jq=true
fi

existing_doc=""
if existing_json="$("${aws_cmd[@]}" get-user-policy --user-name "$iam_user" --policy-name "$policy_name" 2>/dev/null)"; then
    # Extract PolicyDocument (URL-encoded JSON), decode, and normalize if jq present
    encoded_doc=$(printf '%s' "$existing_json" | jq -r '.PolicyDocument' 2>/dev/null || echo "")
    if [[ -n "$encoded_doc" && "$encoded_doc" != "null" ]]; then
        decoded_doc="$(urldecode "$encoded_doc")"
        if $have_jq; then
            existing_doc="$(printf '%s' "$decoded_doc" | jq -cS . 2>/dev/null || true)"
        else
            existing_doc="$decoded_doc"
        fi
    fi
fi

expected_doc="$policy_document"
if $have_jq; then
    expected_doc="$(jq -cS . <"$policy_file")"
fi

if $have_jq && [[ -n "${existing_doc:-}" && "$existing_doc" == "$expected_doc" ]]; then
    echo "✅ Required SNS permissions already configured for IAM user '$iam_user' (policy '$policy_name')."
    exit 0
fi

# Put/overwrite the inline policy (idempotent)
if "${aws_cmd[@]}" put-user-policy \
        --user-name "$iam_user" \
        --policy-name "$policy_name" \
        --policy-document "file://$policy_file" >/dev/null 2>&1; then
    echo "✅ Ensured SNS permissions for IAM user '$iam_user' via inline policy '$policy_name'."
    exit 0
fi

cat <<EOF
❌ Error: Unable to ensure SNS permissions for IAM user '$iam_user' in region '$region'.

Manual fix:
  1) AWS Console → IAM → Users → $iam_user
  2) Add inline policy (JSON), paste the following, name it '$policy_name', save:

$policy_document
EOF

exit 1
