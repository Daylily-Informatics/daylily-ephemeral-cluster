#!/usr/bin/env python3
"""Monitor S3 workset directories and launch Daylily pipelines automatically."""

from __future__ import annotations

import argparse
import concurrent.futures
import contextlib
import csv
import dataclasses
import datetime as dt
import json
import logging
import os
import re
import shutil
import shlex
import subprocess
import sys
import time
from collections import defaultdict
from pathlib import Path, PurePosixPath
from typing import Dict, Iterable, List, Optional, Sequence, Set, Tuple

import boto3
from botocore.exceptions import ClientError
import yaml

LOGGER = logging.getLogger("daylily.workset_monitor")

READY_CLUSTER_STATUSES = {"CREATE_COMPLETE", "UPDATE_COMPLETE"}
READY_COMPUTE_FLEET_STATUSES = {"RUNNING", "ENABLED", "STARTED"}

SENTINEL_FILES = {
    "ready": "daylily.ready",
    "lock": "daylily.lock",
    "in_progress": "daylily.in_progress",
    "error": "daylily.error",
    "complete": "daylily.complete",
    "ignore": "daylily.ignore",
}
OPTIONAL_SENTINELS = {
    SENTINEL_FILES["lock"],
    SENTINEL_FILES["in_progress"],
    SENTINEL_FILES["error"],
    SENTINEL_FILES["complete"],
    SENTINEL_FILES["ignore"],
}
SENTINEL_SUFFIX = tuple(
    "daylily." + suffix
    for suffix in ("ready", "lock", "in_progress", "error", "complete", "ignore")
)

DEFAULT_STAGE_SAMPLES_NAME = "stage_samples.tsv"
WORK_YAML_NAME = "daylily_work.yaml"
INFO_YAML_NAME = "daylily_info.yaml"
SAMPLE_DATA_DIRNAME = "sample_data"
PIPELINE_LOCATION_MARKER = ".daylily-monitor-location"
PIPELINE_SESSION_MARKER = ".daylily-monitor-tmux-session"

STATE_PRIORITIES = {
    "error": 0,
    "in-progress": 1,
    "locked": 2,
    "ready": 3,
    "complete": 4,
    "ignored": 5,
    "unknown": 6,
}
STATE_COLORS = {
    "error": "\033[31m",
    "in-progress": "\033[33m",
    "locked": "\033[36m",
    "ready": "\033[34m",
    "complete": "\033[32m",
    "ignored": "\033[90m",
    "unknown": "\033[37m",
}


class MonitorError(RuntimeError):
    """Raised when a workset fails validation or processing."""


class CommandFailedError(MonitorError):
    """Raised when an external command fails."""

    def __init__(self, command_label: str, command_display: str) -> None:
        super().__init__(f"Command failed: {command_display}")
        self.command_label = command_label
        self.command_display = command_display


@dataclasses.dataclass
class AWSConfig:
    profile: str
    region: str
    session_duration_seconds: Optional[int] = None

    def session_kwargs(self) -> Dict[str, str]:
        kwargs: Dict[str, str] = {"region_name": self.region}
        if self.profile:
            kwargs["profile_name"] = self.profile
        return kwargs


@dataclasses.dataclass
class MonitorOptions:
    bucket: str
    prefix: str
    poll_interval_seconds: int = 60
    ready_lock_backoff_seconds: int = 30
    continuous: bool = True
    sentinel_index_prefix: Optional[str] = None

    def normalised_prefix(self) -> str:
        prefix = self.prefix.lstrip("/")
        if prefix and not prefix.endswith("/"):
            prefix += "/"
        return prefix


@dataclasses.dataclass
class ClusterOptions:
    template_path: Optional[str] = None
    preferred_availability_zone: Optional[str] = None
    auto_teardown: bool = False
    idle_teardown_minutes: int = 20
    reuse_cluster_name: Optional[str] = None
    contact_email: Optional[str] = None


@dataclasses.dataclass
class PipelineOptions:
    workdir: str
    stage_command: str
    clone_command: str
    run_prefix: str
    export_command: str
    local_stage_root: Optional[str] = None
    reference_bucket: Optional[str] = None
    ssh_identity_file: Optional[str] = None
    ssh_user: str = "ubuntu"
    ssh_extra_args: List[str] = dataclasses.field(default_factory=list)
    login_shell_init: str = "source ~/.bashrc"
    tmux_session_prefix: str = "daylily"
    tmux_keepalive_shell: str = "bash"
    # Local monitor metadata (markers, tmux name) â€” never /fsx
    local_state_root: Optional[str] = "~/.cache/daylily-monitor"
    # FSx clone base + repo dir name for fallback path computation
    clone_dest_root: str = "/fsx/analysis_results/ubuntu"
    repo_dir_name: str = "daylily-omics-analysis"


@dataclasses.dataclass
class Workset:
    name: str
    prefix: str
    sentinels: Dict[str, str]
    has_required_files: bool = False

    def sentinel_timestamp(self, sentinel: str) -> Optional[str]:
        return self.sentinels.get(sentinel)


@dataclasses.dataclass
class WorksetReportRow:
    name: str
    state: str
    timestamp: Optional[str]
    detail: Optional[str]
    has_required_files: bool


@dataclasses.dataclass
class MonitorConfig:
    aws: AWSConfig
    monitor: MonitorOptions
    cluster: ClusterOptions
    pipeline: PipelineOptions

    @staticmethod
    def load(path: Path) -> "MonitorConfig":
        with path.open("r", encoding="utf-8") as handle:
            data = yaml.safe_load(handle)
        aws_cfg = AWSConfig(**data["aws"])
        monitor_cfg = MonitorOptions(**data["monitor"])
        cluster_cfg = ClusterOptions(**data.get("cluster", {}))
        pipeline_cfg = PipelineOptions(**data["pipeline"])
        return MonitorConfig(
            aws=aws_cfg, monitor=monitor_cfg, cluster=cluster_cfg, pipeline=pipeline_cfg
        )


class WorksetMonitor:
    def __init__(
        self,
        config: MonitorConfig,
        *,
        dry_run: bool = False,
        debug: bool = False,
        process_directories: Optional[Sequence[str]] = None,
        attempt_restart: bool = False,
    ) -> None:
        self.config = config
        self.dry_run = dry_run
        self.debug = debug
        self.attempt_restart = attempt_restart

        self._session = boto3.session.Session(**config.aws.session_kwargs())
        self._s3 = self._session.client("s3")
        self._sts = self._session.client("sts")
        self._sentinel_history: Dict[str, Dict[str, str]] = {}
        self._process_directories: Optional[Set[str]] = (
            {name.strip() for name in process_directories if name.strip()}
            if process_directories
            else None
        )
        self._headnode_ips: Dict[str, str] = {}
        self._pipeline_locations: Dict[str, PurePosixPath] = {}

    # ------------------------------------------------------------------
    # Public entrypoints
    # ------------------------------------------------------------------
    def run(self) -> None:
        LOGGER.info("Starting Daylily workset monitor in %s", self.config.aws.region)
        if self.config.aws.session_duration_seconds:
            self._refresh_session()
        while True:
            start_time = time.time()
            try:
                worksets = list(self._discover_worksets())
                self._update_sentinel_indexes(worksets)
                for workset in worksets:
                    self._handle_workset(workset)
            except Exception:
                LOGGER.exception("Unexpected failure while monitoring worksets")
            elapsed = time.time() - start_time
            sleep_for = max(self.config.monitor.poll_interval_seconds - elapsed, 0)
            if not self.config.monitor.continuous:
                break
            if sleep_for:
                LOGGER.debug("Sleeping %.1fs before next poll", sleep_for)
                time.sleep(sleep_for)

    # ------------------------------------------------------------------
    # Workset discovery
    # ------------------------------------------------------------------
    def _discover_worksets(self) -> Iterable[Workset]:
        bucket = self.config.monitor.bucket
        prefix = self.config.monitor.normalised_prefix()
        paginator = self._s3.get_paginator("list_objects_v2")
        for page in paginator.paginate(Bucket=bucket, Prefix=prefix, Delimiter="/"):
            for common_prefix in page.get("CommonPrefixes", []):
                workset_prefix = common_prefix["Prefix"]
                name = workset_prefix.rstrip("/").split("/")[-1]
                sentinels = self._list_sentinels(workset_prefix)
                has_required = self._verify_core_files(workset_prefix)
                yield Workset(
                    name=name,
                    prefix=workset_prefix,
                    sentinels=sentinels,
                    has_required_files=has_required,
                )

    def _list_sentinels(self, workset_prefix: str) -> Dict[str, str]:
        """List all sentinel files for a workset with pagination safety."""
        bucket = self.config.monitor.bucket
        paginator = self._s3.get_paginator("list_objects_v2")
        sentinel_timestamps: Dict[str, str] = {}
        for page in paginator.paginate(Bucket=bucket, Prefix=workset_prefix):
            for obj in page.get("Contents", []) or []:
                key = obj["Key"]
                if not key.endswith(SENTINEL_SUFFIX):
                    continue
                name = key.split("/")[-1]
                with contextlib.suppress(KeyError):
                    sentinel_timestamps[name] = self._read_object_text(bucket, key)
        return sentinel_timestamps

    def _verify_core_files(self, workset_prefix: str) -> bool:
        bucket = self.config.monitor.bucket
        expected = [
            DEFAULT_STAGE_SAMPLES_NAME,
            WORK_YAML_NAME,
            INFO_YAML_NAME,
            SAMPLE_DATA_DIRNAME + "/",
        ]
        found = set()
        paginator = self._s3.get_paginator("list_objects_v2")
        for page in paginator.paginate(
            Bucket=bucket, Prefix=workset_prefix, Delimiter="/"
        ):
            for cp in page.get("CommonPrefixes", []) or []:
                if cp["Prefix"].endswith(SAMPLE_DATA_DIRNAME + "/"):
                    found.add(SAMPLE_DATA_DIRNAME + "/")
            for obj in page.get("Contents", []) or []:
                name = obj["Key"].split("/")[-1]
                if name in (DEFAULT_STAGE_SAMPLES_NAME, WORK_YAML_NAME, INFO_YAML_NAME):
                    found.add(name)
        missing = set(expected) - found
        if missing:
            LOGGER.warning(
                "Workset %s missing expected files: %s",
                workset_prefix,
                ", ".join(sorted(missing)),
            )
            return False
        return True

    # ------------------------------------------------------------------
    # Clone/run helpers (templating + FSx path fallback)
    # ------------------------------------------------------------------
    def _sanitize_name(self, s: str) -> str:
        return re.sub(r"[^A-Za-z0-9._-]", "_", s)

    def _workdir_name(self, workset: Workset, work_yaml: Dict[str, object]) -> str:
        wd = work_yaml.get("workdir_name")
        if isinstance(wd, str) and wd.strip():
            return self._sanitize_name(wd.strip())
        return self._sanitize_name(workset.name)

    def _format_clone_args(
        self, clone_args: str, workset: Workset, work_yaml: Dict[str, object]
    ) -> str:
        if not clone_args:
            return ""
        mapping = {
            "workset": workset.name,
            "workdir_name": self._workdir_name(workset, work_yaml),
        }
        try:
            return clone_args.format(**mapping)
        except Exception:
            return clone_args

    def _extract_dest_from_clone_args(self, clone_args: str) -> Optional[str]:
        if not clone_args:
            return None
        parts = shlex.split(clone_args)
        for i, tok in enumerate(parts):
            if tok in ("-d", "--dest", "--destination"):
                if i + 1 < len(parts):
                    return self._sanitize_name(parts[i + 1])
            if tok.startswith("-d="):
                return self._sanitize_name(tok.split("=", 1)[1])
        return None

    def _expected_pipeline_dir(self, dest_name: str) -> PurePosixPath:
        root = self.config.pipeline.clone_dest_root.rstrip("/")
        repo = self.config.pipeline.repo_dir_name.strip("/")
        return PurePosixPath(f"{root}/{dest_name}/{repo}")

    # ------------------------------------------------------------------
    # Sentinel logging
    # ------------------------------------------------------------------
    def _update_sentinel_indexes(self, worksets: Sequence[Workset]) -> None:
        states: Dict[str, List[str]] = defaultdict(list)
        for workset in worksets:
            for sentinel, timestamp in workset.sentinels.items():
                if sentinel in OPTIONAL_SENTINELS or sentinel == SENTINEL_FILES["ready"]:
                    states[sentinel].append(f"{workset.name}\t{timestamp}")
        if not self.config.monitor.sentinel_index_prefix:
            return
        bucket = self.config.monitor.bucket
        base_prefix = self.config.monitor.sentinel_index_prefix
        base_prefix = base_prefix.rstrip("/") + "/" if base_prefix else ""
        for sentinel_name, rows in states.items():
            key = f"{base_prefix}{sentinel_name}.log"
            body = "\n".join(sorted(rows)).encode("utf-8")
            LOGGER.debug(
                "Updating sentinel index %s with %d entries", key, len(rows)
            )
            if self.dry_run:
                continue
            self._s3.put_object(Bucket=bucket, Key=key, Body=body)

    # ------------------------------------------------------------------
    # Workset state machine
    # ------------------------------------------------------------------
    def _handle_workset(self, workset: Workset) -> None:
        if not self._should_process(workset):
            LOGGER.info(
                "Skipping %s: not selected via --process-directory", workset.name
            )
            return
        sentinels = workset.sentinels
        if not sentinels:
            LOGGER.info("Skipping %s: no sentinel files present", workset.name)
            return
        if SENTINEL_FILES["ignore"] in sentinels:
            LOGGER.info("Skipping %s: daylily.ignore present", workset.name)
            return
        if SENTINEL_FILES["complete"] in sentinels:
            LOGGER.info(
                "Skipping %s: already complete (at %s)",
                workset.name,
                sentinels[SENTINEL_FILES["complete"]],
            )
            return
        if SENTINEL_FILES["error"] in sentinels:
            if self.attempt_restart:
                error_ts = sentinels[SENTINEL_FILES["error"]]
                LOGGER.info(
                    "Retrying %s: clearing error sentinel recorded at %s due to --attempt-restart",
                    workset.name,
                    error_ts,
                )
                self._delete_sentinel(workset, SENTINEL_FILES["error"])
                sentinels.pop(SENTINEL_FILES["error"], None)
                cleared: List[str] = []
                for stale in (SENTINEL_FILES["lock"], SENTINEL_FILES["in_progress"]):
                    if stale in sentinels:
                        self._delete_sentinel(workset, stale)
                        sentinels.pop(stale, None)
                        cleared.append(stale)
                if cleared:
                    LOGGER.debug(
                        "Removed stale sentinels for %s during restart: %s",
                        workset.name,
                        ", ".join(sorted(cleared)),
                    )
            else:
                LOGGER.info(
                    "Skipping %s: previously errored at %s",
                    workset.name,
                    sentinels[SENTINEL_FILES["error"]],
                )
                return
        if SENTINEL_FILES["in_progress"] in sentinels:
            LOGGER.info(
                "Skipping %s: currently marked in-progress (since %s)",
                workset.name,
                sentinels[SENTINEL_FILES["in_progress"]],
            )
            return
        if SENTINEL_FILES["ready"] not in sentinels:
            LOGGER.info("Skipping %s: ready sentinel missing", workset.name)
            return
        if not workset.has_required_files:
            LOGGER.warning("Skipping %s: required files missing", workset.name)
            return
        LOGGER.info("Attempting to acquire ready workset %s", workset.name)
        acquired = self._attempt_acquire(workset)
        if not acquired:
            LOGGER.info(
                "Workset %s lock attempt failed (contention or changed state)",
                workset.name,
            )
            return
        try:
            self._process_workset(workset)
        except Exception as exc:
            LOGGER.exception("Processing of %s failed", workset.name)
            self._write_sentinel(
                workset,
                SENTINEL_FILES["error"],
                f"{dt.datetime.utcnow().isoformat()}Z\t{exc}",
            )
        else:
            self._write_sentinel(
                workset,
                SENTINEL_FILES["complete"],
                f"{dt.datetime.utcnow().isoformat()}Z",
            )

    def _attempt_acquire(self, workset: Workset) -> bool:
        initial_snapshot = dict(workset.sentinels)
        timestamp = f"{dt.datetime.utcnow().isoformat()}Z"
        self._write_sentinel(workset, SENTINEL_FILES["lock"], timestamp)
        LOGGER.debug("Wrote lock sentinel for %s", workset.name)
        time.sleep(self.config.monitor.ready_lock_backoff_seconds)
        refreshed = self._list_sentinels(workset.prefix)
        unexpected = set(refreshed) - set(initial_snapshot)
        # If anything else changed besides our lock, treat as contention and back off (no error).
        if unexpected - {SENTINEL_FILES["lock"]}:
            LOGGER.warning(
                "Detected competing sentinel update for %s: %s",
                workset.name,
                ", ".join(sorted(unexpected)),
            )
            self._delete_sentinel(workset, SENTINEL_FILES["lock"])
            return False
        LOGGER.info("Acquired workset %s", workset.name)
        self._write_sentinel(
            workset,
            SENTINEL_FILES["in_progress"],
            f"{dt.datetime.utcnow().isoformat()}Z",
        )
        return True

    # ------------------------------------------------------------------
    # Workset processing pipeline
    # ------------------------------------------------------------------
    def _process_workset(self, workset: Workset) -> None:
        manifest_bytes = self._read_required_object(
            workset.prefix, DEFAULT_STAGE_SAMPLES_NAME
        )
        manifest_path = self._write_temp_file(
            workset, DEFAULT_STAGE_SAMPLES_NAME, manifest_bytes
        )
        manifest_path = self._copy_manifest_to_local(workset, manifest_path)
        work_yaml_bytes = self._read_required_object(workset.prefix, WORK_YAML_NAME)
        work_yaml = yaml.safe_load(work_yaml_bytes.decode("utf-8"))

        self._validate_stage_manifest(manifest_bytes, workset)

        clone_args_raw = self._yaml_get_str(
            work_yaml,
            ["day_clone_args", "day-clone", "clone_args", "clone-args", "clone"]
        ) or ""
        clone_args = self._format_clone_args(clone_args_raw, workset, work_yaml)

        run_suffix = self._yaml_get_str(
            work_yaml,
            ["dy_r", "dy-r", "dy", "run", "run_suffix", "run-suffix", "run_cmd", "run-command"],
        )

        target_export_uri = self._yaml_get_str(
            work_yaml, ["export_uri", "export-uri", "export"]
        )

        cluster_name = self._ensure_cluster(work_yaml)
        LOGGER.info("Using cluster %s for workset %s", cluster_name, workset.name)

        completed_commands: Set[str] = set()
        if clone_args:
            # Clone once up front
            pipeline_dir = self._prepare_pipeline_workspace(
                workset, cluster_name, clone_args, run_clone=True
            )
            completed_commands.add("clone_pipeline")
        else:
            # No clone; ensure fallback dir on headnode
            pipeline_dir = self._prepare_pipeline_workspace(
                workset, cluster_name, clone_args, run_clone=False
            )

        retry_attempted = False
        while True:
            try:
                self._execute_workset_commands(
                    workset,
                    manifest_path,
                    cluster_name,
                    clone_args,
                    run_suffix,
                    target_export_uri,
                    pipeline_dir,
                    completed_commands,
                )
                break
            except CommandFailedError as exc:
                if not self.attempt_restart or retry_attempted:
                    raise
                retry_attempted = True
                LOGGER.warning(
                    "Command %s failed for %s; attempting restart from this command",
                    exc.command_label,
                    workset.name,
                )
                continue

    def _execute_workset_commands(
        self,
        workset: Workset,
        manifest_path: Path,
        cluster_name: str,
        clone_args: str,
        run_suffix: Optional[str],
        target_export_uri: Optional[str],
        pipeline_dir: PurePosixPath,
        completed_commands: Set[str],
    ) -> None:
        stage_label = "stage_samples"
        with concurrent.futures.ThreadPoolExecutor(max_workers=2) as executor:
            if stage_label in completed_commands:
                LOGGER.info(
                    "Skipping sample staging for %s: command already completed",
                    workset.name,
                )
                stage_future = executor.submit(lambda: None)
            else:
                stage_future = executor.submit(
                    self._stage_samples, manifest_path, cluster_name
                )
            cluster_future = executor.submit(
                self._wait_for_cluster_ready, cluster_name
            )
            cluster_future.result()
            try:
                stage_future.result()
            except CommandFailedError:
                raise
            completed_commands.add(stage_label)

        clone_label = "clone_pipeline"
        clone_needed = bool(clone_args) and clone_label not in completed_commands
        if clone_needed:
            LOGGER.info("Running pipeline clone for %s", workset.name)
            pipeline_dir = self._prepare_pipeline_workspace(
                workset, cluster_name, clone_args, run_clone=True
            )
            completed_commands.add(clone_label)
        elif clone_args:
            LOGGER.info(
                "Skipping pipeline clone for %s: command already completed",
                workset.name,
            )

        push_label = "push_stage_files"
        if push_label in completed_commands:
            LOGGER.info(
                "Skipping stage file push for %s: command already completed",
                workset.name,
            )
        else:
            self._push_stage_files_to_pipeline(
                cluster_name, pipeline_dir, manifest_path
            )
            completed_commands.add(push_label)

        run_label = "run_pipeline"
        if run_label in completed_commands:
            LOGGER.info(
                "Skipping pipeline run for %s: command already completed",
                workset.name,
            )
        else:
            self._run_pipeline(workset, cluster_name, pipeline_dir, run_suffix)
            completed_commands.add(run_label)

        if target_export_uri:
            export_label = "export_results"
            if export_label in completed_commands:
                LOGGER.info(
                    "Skipping export for %s: command already completed", workset.name
                )
            else:
                self._export_results(cluster_name, target_export_uri)
                completed_commands.add(export_label)

    def _local_state_dir(self, workset: Workset) -> Path:
        root = self.config.pipeline.local_state_root or "~/.cache/daylily-monitor"
        path = Path(os.path.expanduser(root)) / workset.name
        path.mkdir(parents=True, exist_ok=True)
        return path

    def _record_pipeline_location(
        self, workset: Workset, location: PurePosixPath
    ) -> None:
        self._pipeline_locations[workset.name] = location
        state_dir = self._local_state_dir(workset)
        marker = state_dir / PIPELINE_LOCATION_MARKER
        marker.write_text(str(location), encoding="utf-8")

    def _load_pipeline_location(self, workset: Workset) -> Optional[PurePosixPath]:
        cached = self._pipeline_locations.get(workset.name)
        if cached:
            return cached
        marker = self._local_state_dir(workset) / PIPELINE_LOCATION_MARKER
        if not marker.exists():
            return None
        text = marker.read_text(encoding="utf-8").strip()
        if not text:
            return None
        location = PurePosixPath(text)
        self._pipeline_locations[workset.name] = location
        return location

    def _parse_day_clone_location(self, output: bytes) -> Optional[PurePosixPath]:
        text = output.decode("utf-8", errors="ignore")
        for line in text.splitlines():
            stripped = line.strip()
            if not stripped:
                continue
            if stripped.lower().startswith("location"):
                _, _, remainder = stripped.partition(":")
                candidate = remainder.strip()
                if candidate:
                    return PurePosixPath(candidate)
            if stripped.startswith("cd "):
                parts = shlex.split(stripped)
                if len(parts) >= 2:
                    return PurePosixPath(parts[1])
        return None

    def _record_tmux_session(self, workset: Workset, session_name: str) -> None:
        state_dir = self._local_state_dir(workset)
        marker = state_dir / PIPELINE_SESSION_MARKER
        marker.write_text(session_name, encoding="utf-8")

    def _generate_tmux_session_name(self, workset: Workset) -> str:
        prefix = self.config.pipeline.tmux_session_prefix or "daylily"
        safe_prefix = re.sub(r"[^A-Za-z0-9_-]", "_", prefix)
        safe_name = re.sub(r"[^A-Za-z0-9_-]", "_", workset.name)
        timestamp = int(time.time())
        return f"{safe_prefix}_{safe_name}_{timestamp}"

    def _validate_stage_manifest(
        self, manifest_bytes: bytes, workset: Workset
    ) -> None:
        lines = manifest_bytes.decode("utf-8").splitlines()
        if not lines:
            raise MonitorError(f"stage_samples.tsv for {workset.name} is empty")
        header = lines[0].split("\t")
        s3_columns = [
            idx
            for idx, name in enumerate(header)
            if name.lower().endswith("_uri") or name.lower().startswith("s3")
        ]
        sample_data_columns = [
            idx
            for idx, name in enumerate(header)
            if name.lower().startswith("path") or name.lower().endswith("_path")
        ]
        for line in lines[1:]:
            if not line.strip():
                continue
            cells = line.split("\t")
            for idx in s3_columns:
                if idx >= len(cells):
                    continue
                value = cells[idx].strip()
                if value:
                    self._assert_s3_uri_exists(value)
            for idx in sample_data_columns:
                if idx >= len(cells):
                    continue
                value = cells[idx].strip()
                if value:
                    self._assert_sample_file_exists(workset, value)

    def _stage_samples(self, manifest_path: Path, cluster_name: str) -> None:
        manifest_argument = self._relative_manifest_argument(manifest_path)
        reference_bucket = self._stage_reference_bucket()
        cmd = self.config.pipeline.stage_command.format(
            profile=self.config.aws.profile,
            region=self.config.aws.region,
            cluster=cluster_name,
            analysis_samples=manifest_argument,
            reference_bucket=reference_bucket,
        )
        LOGGER.info(
            "Staging samples for cluster %s with command: %s", cluster_name, cmd
        )
        self._run_monitored_command("stage_samples", cmd, check=True)

    def _wait_for_cluster_ready(self, cluster_name: str) -> None:
        LOGGER.info("Waiting for cluster %s to become ready", cluster_name)
        for attempt in range(60):
            details = self._describe_cluster(cluster_name)
            if details and self._cluster_is_ready(details):
                LOGGER.debug(
                    "Cluster %s ready (checked %d times)", cluster_name, attempt + 1
                )
                return
            LOGGER.debug("Cluster %s not ready yet (%d)", cluster_name, attempt + 1)
            time.sleep(30)
        raise MonitorError(f"Cluster {cluster_name} did not become ready in time")

    def _prepare_pipeline_workspace(
        self,
        workset: Workset,
        cluster_name: str,
        clone_args: str,
        *,
        run_clone: bool = True,
    ) -> PurePosixPath:
        if clone_args and run_clone:
            init = (self.config.pipeline.login_shell_init or "").strip()
            base = self.config.pipeline.clone_command.format(clone_args=clone_args)
            cmd = f"{init} && {base}" if init else base
            result = self._run_headnode_monitored_command(
                "clone_pipeline",
                cmd,
                cluster_name=cluster_name,
                check=True,
                shell=True,  # pass as raw string to bash -lc
            )
            location = self._parse_day_clone_location(result.stdout)
            if not location and result.stderr:
                location = self._parse_day_clone_location(result.stderr)
            if not location:
                dest = self._extract_dest_from_clone_args(clone_args) or self._sanitize_name(workset.name)
                location = self._expected_pipeline_dir(dest)
                LOGGER.info(
                    "day-clone did not report Location; falling back to %s", location
                )
            LOGGER.info(
                "day-clone reported pipeline directory %s for %s",
                location,
                workset.name,
            )
            self._record_pipeline_location(workset, location)
            return location
        if clone_args:
            location = self._load_pipeline_location(workset)
            if location:
                LOGGER.info(
                    "Reusing recorded pipeline directory %s for %s",
                    location,
                    workset.name,
                )
                return location
            raise MonitorError(
                "Pipeline location unavailable for restart; rerun day-clone or remove cached state"
            )
        # No clone requested; ensure fallback dir on headnode exists
        fallback = PurePosixPath(self.config.pipeline.workdir) / workset.name
        ensure_cmd = f"mkdir -p {shlex.quote(str(fallback))}"
        self._run_headnode_command(cluster_name, ensure_cmd, check=True, shell=True)
        self._record_pipeline_location(workset, fallback)
        return fallback

    def _push_stage_files_to_pipeline(
        self,
        cluster_name: str,
        pipeline_dir: PurePosixPath,
        manifest_path: Path,
    ) -> None:
        config_dir = pipeline_dir / "config"
        mkdir_cmd = f"mkdir -p {shlex.quote(str(config_dir))}"
        self._run_headnode_monitored_command(
            "push_stage_files",
            mkdir_cmd,
            cluster_name=cluster_name,
            check=True,
            shell=True,
        )
        LOGGER.info("Copying staged manifest into %s", config_dir)
        samples_target = config_dir / "samples.tsv"
        units_target = config_dir / "units.tsv"
        scp_samples = self._build_scp_command(cluster_name, manifest_path, samples_target)
        self._run_monitored_command("push_stage_files", scp_samples, check=True)
        units_src = manifest_path.with_name("units.tsv")
        if units_src.exists():
            scp_units = self._build_scp_command(cluster_name, units_src, units_target)
            self._run_monitored_command("push_stage_files", scp_units, check=True)

    def _run_pipeline(
        self,
        workset: Workset,
        cluster_name: str,
        pipeline_dir: PurePosixPath,
        run_suffix: Optional[str],
    ) -> None:
        if not run_suffix:
            raise MonitorError(
                "Missing pipeline run suffix in daylily_work.yaml. "
                "Provide one of: dy-r, dy_r, dy, run, run_suffix, run-suffix, run_cmd."
            )

        run_command = self.config.pipeline.run_prefix + run_suffix
        session_name = self._generate_tmux_session_name(workset)

        # build: echo go && cd <fsx path> && (optional init) && run && (optional keepalive)
        steps: List[str] = []
        steps.append("echo go")
        steps.append(f"cd {shlex.quote(str(pipeline_dir))}")

        init_cmd = (self.config.pipeline.login_shell_init or "").strip()
        if init_cmd:
            steps.append(init_cmd)

        steps.append(run_command)

        keepalive = (self.config.pipeline.tmux_keepalive_shell or "").strip()
        if keepalive:
            steps.append(keepalive)

        composite = " && ".join(steps)

        tmux_cmd = ["tmux", "new-session", "-d", "-s", session_name, "bash", "-lc", composite]

        LOGGER.info("Launching pipeline for %s in tmux session %s: %s",
                    workset.name, session_name, run_command)
        self._record_tmux_session(workset, session_name)
        self._write_pipeline_sentinel(cluster_name, pipeline_dir, "START")
        try:
            self._run_headnode_monitored_command("run_pipeline", tmux_cmd, cluster_name=cluster_name, check=True, shell=False)
            self._run_headnode_command(cluster_name, ["tmux", "has-session", "-t", session_name], check=True, shell=False)
        finally:
            self._write_pipeline_sentinel(cluster_name, pipeline_dir, "END")


    def _export_results(self, cluster_name: str, target_uri: str) -> None:
        command = self.config.pipeline.export_command.format(
            cluster=cluster_name, target_uri=target_uri
        )
        LOGGER.info("Exporting pipeline results to %s", target_uri)
        self._run_headnode_monitored_command(
            "export_results",
            command,
            cluster_name=cluster_name,
            check=True,
            shell=True,
        )

    # ------------------------------------------------------------------
    # Cluster helpers
    # ------------------------------------------------------------------
    def _ensure_cluster(self, work_yaml: Dict[str, object]) -> str:
        if self.config.cluster.reuse_cluster_name:
            return self.config.cluster.reuse_cluster_name
        existing = self._find_existing_cluster()
        if existing:
            return existing
        return self._create_cluster(work_yaml)

    def _pcluster_env(self) -> Dict[str, str]:
        env = os.environ.copy()
        if self.config.aws.profile:
            env["AWS_PROFILE"] = self.config.aws.profile
        return env

    def _load_pcluster_json(self, raw: bytes) -> Optional[object]:
        text = raw.decode("utf-8", errors="ignore").strip()
        if not text:
            return None
        brace_positions = [pos for pos in (text.find("{"), text.find("[")) if pos != -1]
        if brace_positions:
            text = text[min(brace_positions):]
        try:
            return json.loads(text)
        except json.JSONDecodeError as exc:
            LOGGER.debug("Failed to decode pcluster output as JSON: %s", exc)
            return None

    def _describe_cluster(self, cluster_name: str) -> Optional[Dict[str, object]]:
        cmd = ["pcluster", "describe-cluster", "--region", self.config.aws.region, "-n", cluster_name]
        result = self._run_command(cmd, check=False, env=self._pcluster_env())
        if result.returncode != 0:
            LOGGER.debug(
                "Unable to describe cluster %s (exit %s): %s",
                cluster_name,
                result.returncode,
                result.stderr.decode(errors="ignore"),
            )
            return None
        payload = self._load_pcluster_json(result.stdout)
        if isinstance(payload, dict):
            return payload
        LOGGER.debug("Unexpected describe-cluster output for %s", cluster_name)
        return None

    def _cluster_is_ready(self, details: Dict[str, object]) -> bool:
        cluster_status = str(details.get("clusterStatus", "")).upper()
        compute_status = str(details.get("computeFleetStatus", "")).upper()
        if cluster_status not in READY_CLUSTER_STATUSES:
            return False
        if compute_status and compute_status not in READY_COMPUTE_FLEET_STATUSES:
            return False
        return True

    def _extract_cluster_zone(self, details: Dict[str, object]) -> Optional[str]:
        head_node = details.get("headNode")
        if isinstance(head_node, dict):
            zone = head_node.get("availabilityZone") or head_node.get("AvailabilityZone")
            if isinstance(zone, str):
                return zone
        return None

    def _find_existing_cluster(self) -> Optional[str]:
        LOGGER.debug("Checking for existing clusters in %s", self.config.aws.region)
        cmd = ["pcluster", "list-clusters", "--region", self.config.aws.region]
        result = self._run_command(cmd, check=False, env=self._pcluster_env())
        if result.returncode != 0:
            LOGGER.debug(
                "Unable to list clusters (exit %s): %s",
                result.returncode,
                result.stderr.decode(errors="ignore"),
            )
            return None
        payload = self._load_pcluster_json(result.stdout)
        if not isinstance(payload, dict):
            LOGGER.debug("Unexpected list-clusters output: %s", result.stdout.decode(errors="ignore"))
            return None
        clusters = payload.get("clusters")
        if not isinstance(clusters, list):
            return None
        preferred_zone = self.config.cluster.preferred_availability_zone
        for cluster in clusters:
            if not isinstance(cluster, dict):
                continue
            name = cluster.get("clusterName")
            if not name:
                continue
            details = self._describe_cluster(name)
            if not details:
                continue
            if preferred_zone:
                cluster_zone = self._extract_cluster_zone(details)
                if cluster_zone and cluster_zone != preferred_zone:
                    LOGGER.debug(
                        "Skipping cluster %s due to availability zone mismatch (%s != %s)",
                        name,
                        cluster_zone,
                        preferred_zone,
                    )
                    continue
                if not cluster_zone:
                    LOGGER.debug(
                        "Cluster %s missing availability zone information; unable to enforce preference",
                        name,
                    )
            if self._cluster_is_ready(details):
                return name
        return None

    def _create_cluster(self, work_yaml: Dict[str, object]) -> str:
        cluster_name = work_yaml.get("cluster_name") or f"daylily-{int(time.time())}"
        LOGGER.info("Creating new ephemeral cluster %s", cluster_name)
        cmd = ["./bin/daylily-create-ephemeral-cluster", "--cluster-name", cluster_name]
        if self.config.cluster.template_path:
            cmd.extend(["--config", self.config.cluster.template_path])
        env = os.environ.copy()
        contact_email = self.config.cluster.contact_email or "you@email.com"
        env["DAY_CONTACT_EMAIL"] = contact_email
        env.pop("DAY_DISABLE_AUTO_SELECT", None)
        result = self._run_command(cmd, check=True, env=env)
        LOGGER.debug(
            "Cluster creation stdout: %s", result.stdout.decode(errors="ignore")
        )
        return cluster_name

    # ------------------------------------------------------------------
    # File and S3 helpers
    # ------------------------------------------------------------------
    def _read_required_object(self, workset_prefix: str, filename: str) -> bytes:
        bucket = self.config.monitor.bucket
        key = f"{workset_prefix}{filename}"
        try:
            response = self._s3.get_object(Bucket=bucket, Key=key)
        except ClientError as exc:
            raise MonitorError(
                f"Missing required file {filename} in {workset_prefix}: {exc}"
            ) from exc
        return response["Body"].read()

    def _write_sentinel(self, workset: Workset, sentinel_name: str, value: str) -> None:
        bucket = self.config.monitor.bucket
        key = f"{workset.prefix}{sentinel_name}"
        body = value.encode("utf-8")
        LOGGER.debug("Writing sentinel %s for %s", sentinel_name, workset.name)
        if self.dry_run:
            return
        self._s3.put_object(Bucket=bucket, Key=key, Body=body)


        def _assert_s3_uri_exists(self, uri: str) -> None:
            """Verify that s3://bucket/key exists."""
            if not uri.startswith("s3://"):
                raise MonitorError(f"Invalid S3 URI: {uri}")
            remainder = uri[5:]
            parts = remainder.split("/", 1)
            if len(parts) != 2 or not parts[0] or not parts[1]:
                raise MonitorError(f"Invalid S3 URI: {uri}")
            bucket, key = parts
            try:
                self._s3.head_object(Bucket=bucket, Key=key)
            except ClientError as exc:
                raise MonitorError(f"Referenced S3 object not found: {uri}") from exc

        def _assert_sample_file_exists(self, workset: Workset, relative_path: str) -> None:
            """Verify that a sample_data file exists inside the workset prefix."""
            key = f"{workset.prefix}{SAMPLE_DATA_DIRNAME}/{relative_path.lstrip('/')}"
            try:
                self._s3.head_object(Bucket=self.config.monitor.bucket, Key=key)
            except ClientError as exc:
                raise MonitorError(f"Sample data file missing for {workset.name}: {relative_path}") from exc


    def _delete_sentinel(self, workset: Workset, sentinel_name: str) -> None:
        bucket = self.config.monitor.bucket
        key = f"{workset.prefix}{sentinel_name}"
        LOGGER.debug("Deleting sentinel %s for %s", sentinel_name, workset.name)
        if self.dry_run:
            return
        self._s3.delete_object(Bucket=bucket, Key=key)

    def _write_temp_file(self, workset: Workset, filename: str, data: bytes) -> Path:
        temp_dir = Path("/tmp") / f"daylily-workset-{workset.name}"
        temp_dir.mkdir(parents=True, exist_ok=True)
        path = temp_dir / filename
        path.write_bytes(data)
        return path

    def _local_stage_root(self) -> Optional[Path]:
        root = self.config.pipeline.local_stage_root
        if not root:
            return None
        path = Path(root).expanduser()
        path.mkdir(parents=True, exist_ok=True)
        return path

    def _copy_manifest_to_local(self, workset: Workset, manifest_path: Path) -> Path:
        """Optional mirror of stage_samples.tsv to a local cache (for audit/inspection)."""
        local_root = self._local_stage_root()
        if not local_root:
            return manifest_path
        destination_dir = local_root / workset.name
        destination_dir.mkdir(parents=True, exist_ok=True)
        destination_path = destination_dir / manifest_path.name
        shutil.copy2(manifest_path, destination_path)
        LOGGER.info("Copied stage manifest for %s to %s", workset.name, destination_path)
        return destination_path

    def _relative_manifest_argument(self, manifest_path: Path) -> str:
        """Prefer a relative path when possible, otherwise absolute."""
        try:
            return str(manifest_path.relative_to(Path.cwd()))
        except ValueError:
            return str(manifest_path)

    def _stage_reference_bucket(self) -> str:
        """
        Return the S3 reference bucket to pass to the staging command.
        Uses pipeline.reference_bucket if set; otherwise defaults to the monitor's bucket.
        Always ends with a trailing '/'.
        """
        bucket = self.config.pipeline.reference_bucket
        if not bucket:
            bucket = f"s3://{self.config.monitor.bucket}"
        if not bucket.endswith("/"):
            bucket += "/"
        return bucket

    def _read_object_text(self, bucket: str, key: str) -> str:
        response = self._s3.get_object(Bucket=bucket, Key=key)
        return response["Body"].read().decode("utf-8")

    def _should_process(self, workset: Workset) -> bool:
        if not self._process_directories:
            return True
        return workset.name in self._process_directories

    def _generate_report_rows(self, worksets: Sequence[Workset]) -> List[WorksetReportRow]:
        rows = [
            self._summarize_workset(workset)
            for workset in worksets
            if self._should_process(workset)
        ]
        rows.sort(key=self._report_sort_key)
        return rows

    def _summarize_workset(self, workset: Workset) -> WorksetReportRow:
        sentinels = workset.sentinels

        def sentinel_parts(name: str) -> Tuple[Optional[str], Optional[str]]:
            raw = sentinels.get(name)
            if not raw:
                return None, None
            text = raw.strip()
            if not text:
                return None, None
            if "\t" in text:
                timestamp, detail = text.split("\t", 1)
            else:
                timestamp, detail = text, None
            return timestamp or None, detail or None

        ignore_ts, ignore_detail = sentinel_parts(SENTINEL_FILES["ignore"])
        if ignore_ts:
            return WorksetReportRow(
                workset.name, "ignored", ignore_ts, ignore_detail, workset.has_required_files
            )

        error_ts, error_detail = sentinel_parts(SENTINEL_FILES["error"])
        if error_ts:
            return WorksetReportRow(
                workset.name, "error", error_ts, error_detail, workset.has_required_files
            )

        complete_ts, _ = sentinel_parts(SENTINEL_FILES["complete"])
        if complete_ts:
            return WorksetReportRow(
                workset.name, "complete", complete_ts, None, workset.has_required_files
            )

        in_progress_ts, _ = sentinel_parts(SENTINEL_FILES["in_progress"])
        if in_progress_ts:
            return WorksetReportRow(
                workset.name, "in-progress", in_progress_ts, None, workset.has_required_files
            )

        lock_ts, _ = sentinel_parts(SENTINEL_FILES["lock"])
        if lock_ts:
            return WorksetReportRow(
                workset.name, "locked", lock_ts, None, workset.has_required_files
            )

        ready_ts, _ = sentinel_parts(SENTINEL_FILES["ready"])
        if ready_ts:
            return WorksetReportRow(
                workset.name, "ready", ready_ts, None, workset.has_required_files
            )

        return WorksetReportRow(workset.name, "unknown", None, None, workset.has_required_files)

    def _report_sort_key(self, row: WorksetReportRow) -> Tuple[int, str]:
        priority = STATE_PRIORITIES.get(row.state, max(STATE_PRIORITIES.values()) + 1)
        return priority, row.name

    def _render_term_report(self, rows: Sequence[WorksetReportRow]) -> None:
        if not rows:
            print("No worksets matched the selection.")
            return
        name_width = max(len("Workset"), max(len(row.name) for row in rows))
        state_width = max(len("State"), max(len(row.state) for row in rows))
        timestamp_width = max(len("Timestamp"), max(len(row.timestamp or "-") for row in rows))
        required_header = "Required"
        detail_header = "Detail"
        header = (
            f"{'Workset':<{name_width}}  {'State':<{state_width}}  {'Timestamp':<{timestamp_width}}  "
            f"{required_header:<8}  {detail_header}"
        )
        print(header)
        print("-" * len(header))
        for row in rows:
            state_color = STATE_COLORS.get(row.state, STATE_COLORS["unknown"])
            reset = "\033[0m"
            state_text = f"{state_color}{row.state:<{state_width}}{reset}"
            timestamp_text = row.timestamp or "-"
            required_text = f"{'yes':<8}" if row.has_required_files else f"\033[31m{'NO':<8}\033[0m"
            detail_text = row.detail or ""
            print(
                f"{row.name:<{name_width}}  {state_text}  {timestamp_text:<{timestamp_width}}  "
                f"{required_text}  {detail_text}"
            )

    def _write_delimited_report(self, rows: Sequence[WorksetReportRow], path: Path, delimiter: str) -> None:
        with path.open("w", encoding="utf-8", newline="") as handle:
            writer = csv.writer(handle, delimiter=delimiter)
            writer.writerow(["workset", "state", "timestamp", "detail", "has_required_files"])
            for row in rows:
                writer.writerow(
                    [
                        row.name,
                        row.state,
                        row.timestamp or "",
                        row.detail or "",
                        "yes" if row.has_required_files else "no",
                    ]
                )

    def report(self, target: str) -> None:
        worksets = list(self._discover_worksets())
        rows = self._generate_report_rows(worksets)
        if self._process_directories:
            found = {row.name for row in rows}
            missing = sorted(self._process_directories - found)
            for name in missing:
                LOGGER.warning("Requested workset %s was not found", name)

        if target.lower() == "term":
            self._render_term_report(rows)
            return

        # Buffer CSV/TSV once so we can write to S3 or local
        def _serialize(rows: Sequence[WorksetReportRow], delim: str) -> bytes:
            from io import StringIO
            buf = StringIO()
            w = csv.writer(buf, delimiter=delim)
            w.writerow(["workset", "state", "timestamp", "detail", "has_required_files"])
            for r in rows:
                w.writerow([r.name, r.state, r.timestamp or "", r.detail or "", "yes" if r.has_required_files else "no"])
            return buf.getvalue().encode("utf-8")

        if target.startswith("s3://"):
            delim = "\t" if target.lower().endswith(".tsv") else ","
            body = _serialize(rows, delim)
            bucket, key = target[5:].split("/", 1)
            if self.dry_run:
                print(f"[DRY-RUN] put_object s3://{bucket}/{key} ({len(body)} bytes)")
            else:
                self._s3.put_object(Bucket=bucket, Key=key, Body=body)
            LOGGER.info("Wrote report with %d entries to %s", len(rows), target)
            return

        # local file
        path = Path(target)
        suffix = path.suffix.lower()
        delim = "\t" if suffix == ".tsv" else ","
        if path.parent and not path.parent.exists():
            path.parent.mkdir(parents=True, exist_ok=True)
        self._write_delimited_report(rows, path, delim)
        LOGGER.info("Wrote report with %d entries to %s", len(rows), path)

    # ------------------------------------------------------------------
    # Command helpers
    # ------------------------------------------------------------------
    def _run_monitored_command(
        self,
        command_label: str,
        command: Sequence[str] | str,
        *,
        check: bool,
        cwd: Optional[Path] = None,
        shell: bool = False,
        env: Optional[Dict[str, str]] = None,
    ) -> subprocess.CompletedProcess:
        if isinstance(command, (str, bytes)) and not shell:
            cmd_display = command
        else:
            cmd_display = " ".join(command) if not isinstance(command, str) else command
        try:
            return self._run_command(
                command, check=check, cwd=cwd, shell=shell, env=env
            )
        except MonitorError as exc:
            raise CommandFailedError(command_label, str(cmd_display)) from exc

    def _run_command(
        self,
        command: Sequence[str] | str,
        *,
        check: bool,
        cwd: Optional[Path] = None,
        shell: bool = False,
        env: Optional[Dict[str, str]] = None,
    ) -> subprocess.CompletedProcess:
        if isinstance(command, (str, bytes)) and not shell:
            cmd_display = command
        else:
            cmd_display = " ".join(command) if not isinstance(command, str) else command
        LOGGER.debug("Executing command: %s", cmd_display)

        action = "DRY-RUN" if self.dry_run else "EXEC"
        if self.dry_run or self.debug:
            print(f"[{action}] {cmd_display}")

        if self.dry_run:
            return subprocess.CompletedProcess(args=command, returncode=0, stdout=b"", stderr=b"")

        run_command = command
        run_shell = shell
        if isinstance(command, str) and not shell:
            run_command = shlex.split(command)
        result = subprocess.run(
            run_command,
            check=False,
            cwd=cwd,
            shell=run_shell,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            env=env,
        )
        if check and result.returncode != 0:
            LOGGER.error(
                "Command failed (%s): %s",
                result.returncode,
                result.stderr.decode(errors="ignore"),
            )
            raise MonitorError(f"Command failed: {cmd_display}")
        return result

    def _ssh_identity(self) -> Optional[str]:
        identity = self.config.pipeline.ssh_identity_file
        if not identity:
            return None
        return str(Path(identity).expanduser())

    def _ssh_user(self) -> str:
        return self.config.pipeline.ssh_user or "ubuntu"

    def _ssh_options(self) -> List[str]:
        options = ["-o", "StrictHostKeyChecking=no", "-o", "UserKnownHostsFile=/dev/null"]
        if self.config.pipeline.ssh_extra_args:
            options.extend(self.config.pipeline.ssh_extra_args)
        return options

    def _headnode_ip(self, cluster_name: str) -> str:
        cached = self._headnode_ips.get(cluster_name)
        if cached:
            return cached
        cmd = ["pcluster", "describe-cluster-instances", "--region", self.config.aws.region, "-n", cluster_name]
        result = self._run_command(cmd, check=True, env=self._pcluster_env())
        payload = self._load_pcluster_json(result.stdout)
        if isinstance(payload, dict):
            instances = payload.get("instances")
            if isinstance(instances, list):
                for instance in instances:
                    if not isinstance(instance, dict):
                        continue
                    node_type = instance.get("nodeType") or instance.get("NodeType")
                    if isinstance(node_type, str) and node_type.lower() == "headnode":
                        ip = instance.get("publicIpAddress") or instance.get("PublicIpAddress")
                        if isinstance(ip, str) and ip:
                            self._headnode_ips[cluster_name] = ip
                            return ip
        raise MonitorError(f"Unable to determine head node address for {cluster_name}")

    def _build_remote_command(
        self,
        command: Sequence[str] | str,
        *,
        cwd: Optional[str] = None,
        shell: bool = False,
    ) -> str:
        if isinstance(command, (list, tuple)):
            command_str = " ".join(shlex.quote(str(part)) for part in command)
        else:
            command_str = command if shell else " ".join(shlex.quote(part) for part in shlex.split(command))
        if cwd:
            command_str = f"cd {shlex.quote(cwd)} && {command_str}"
        return f"bash -lc {shlex.quote(command_str)}"


    def _build_ssh_command(
        self,
        cluster_name: str,
        command: Sequence[str] | str,
        *,
        cwd: Optional[str] = None,
        shell: bool = False,
    ) -> List[str]:
        remote_command = self._build_remote_command(command, cwd=cwd, shell=shell)
        headnode = self._headnode_ip(cluster_name)
        ssh_cmd: List[str] = ["ssh"]
        identity = self._ssh_identity()
        if identity:
            ssh_cmd.extend(["-i", identity])
        ssh_cmd.extend(self._ssh_options())
        ssh_cmd.append(f"{self._ssh_user()}@{headnode}")
        ssh_cmd.append(remote_command)
        return ssh_cmd

    def _build_scp_command(
        self,
        cluster_name: str,
        local_path: Path,
        remote_path: PurePosixPath,
    ) -> List[str]:
        headnode = self._headnode_ip(cluster_name)
        scp_cmd: List[str] = ["scp"]
        identity = self._ssh_identity()
        if identity:
            scp_cmd.extend(["-i", identity])
        scp_cmd.extend(self._ssh_options())
        remote_target = f"{self._ssh_user()}@{headnode}:{remote_path}"
        scp_cmd.extend([str(local_path), remote_target])
        return scp_cmd

    def _run_headnode_command(
        self,
        cluster_name: str,
        command: Sequence[str] | str,
        *,
        check: bool,
        cwd: Optional[str] = None,
        shell: bool = False,
    ) -> subprocess.CompletedProcess:
        ssh_cmd = self._build_ssh_command(cluster_name, command, cwd=cwd, shell=shell)
        return self._run_command(ssh_cmd, check=check)

    def _run_headnode_monitored_command(
        self,
        command_label: str,
        command: Sequence[str] | str,
        *,
        cluster_name: str,
        check: bool,
        cwd: Optional[str] = None,
        shell: bool = False,
    ) -> subprocess.CompletedProcess:
        ssh_cmd = self._build_ssh_command(cluster_name, command, cwd=cwd, shell=shell)
        return self._run_monitored_command(command_label, ssh_cmd, check=check)

    def _yaml_get_str(self, data: Dict[str, object], keys: Sequence[str]) -> Optional[str]:
        """Return first non-empty string for any of the given keys. If list, join; if dict, use suffix/args/cmd/command."""
        for k in keys:
            if k not in data:
                continue
            v = data[k]
            if v is None:
                continue
            if isinstance(v, str) and v.strip():
                return v.strip()
            if isinstance(v, (list, tuple)):
                parts = [str(x).strip() for x in v if str(x).strip()]
                if parts:
                    return " ".join(parts)
            if isinstance(v, dict):
                for candidate in ("suffix", "args", "cmd", "command"):
                    val = v.get(candidate)
                    if isinstance(val, str) and val.strip():
                        return val.strip()
        return None

    # ------------------------------------------------------------------
    # Session helpers
    # ------------------------------------------------------------------
    def _refresh_session(self) -> None:
        LOGGER.debug(
            "Validating STS caller identity for profile %s", self.config.aws.profile
        )
        try:
            identity = self._sts.get_caller_identity()
            LOGGER.info("Assumed identity: %s", identity.get("Arn"))
        except ClientError as exc:
            LOGGER.warning("Unable to validate AWS credentials: %s", exc)


def configure_logging(verbose: bool) -> None:
    level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(level=level, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")


def parse_args(argv: Optional[Sequence[str]] = None) -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Monitor S3 workset directories and launch Daylily pipelines"
    )
    parser.add_argument("config", type=Path, help="Path to the YAML configuration file")
    parser.add_argument("--once", action="store_true", help="Run a single poll iteration and exit")
    parser.add_argument("--dry-run", action="store_true", help="Do not mutate S3 or execute commands")
    parser.add_argument(
        "--attempt-restart",
        action="store_true",
        help="Retry failed workset commands once starting from the failed command",
    )
    parser.add_argument("--verbose", action="store_true", help="Enable debug logging")
    parser.add_argument("--debug", action="store_true", help="Print all commands executed (and in dry-run)")
    parser.add_argument(
        "--process-directory",
        dest="process_directories",
        metavar="NAME",
        nargs="+",
        help="Only process the specified workset directory names",
    )
    parser.add_argument(
        "--report",
        nargs="?",
        const="term",
        help=(
            "Generate a report of the monitored worksets. Use 'term' for a colorized table or provide "
            "a .tsv/.csv filename (local or s3://...)"
        ),
    )
    args = parser.parse_args(argv)
    if args.report and args.report.lower() != "term":
        target = args.report
        if target.startswith("s3://"):
            if not (target.lower().endswith(".csv") or target.lower().endswith(".tsv")):
                parser.error("--report s3://... must end with .tsv or .csv")
        else:
            suffix = Path(target).suffix.lower()
            if suffix not in {".tsv", ".csv"}:
                parser.error("--report expects 'term' or a path ending with .tsv or .csv")
    return args


def main(argv: Optional[Sequence[str]] = None) -> int:
    args = parse_args(argv)
    configure_logging(args.verbose)
    config = MonitorConfig.load(args.config)
    if args.once:
        config.monitor.continuous = False
    monitor = WorksetMonitor(
        config,
        dry_run=args.dry_run,
        debug=args.debug,
        process_directories=args.process_directories,
        attempt_restart=args.attempt_restart,
    )
    if args.report:
        monitor.report(args.report)
        return 0

    monitor.run()
    return 0


if __name__ == "__main__":
    sys.exit(main())
